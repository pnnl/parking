input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

type Comment {
  createdAt: DateTime!
  id: Int!
  message: String!
  updatedAt: DateTime!
  user: User
  userId: String
}

input CommentAggregate {
  average: [CommentFields!]
  count: [CommentFields!]
  maximum: [CommentFields!]
  minimum: [CommentFields!]
  sum: [CommentFields!]
}

input CommentCreateInput {
  message: String!
}

enum CommentFields {
  createdAt
  id
  message
  updatedAt
  userId
}

input CommentFilter {
  createdAt: DateTimeFilter
  id: IntFilter
  message: StringFilter
  referenceId: IntFilter
  updatedAt: DateTimeFilter
  user: UserFilter
  userId: StringFilter
}

input CommentOrderBy {
  createdAt: OrderBy
  id: OrderBy
  message: OrderBy
  updatedAt: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input CommentUniqueFilter {
  id: Int
}

input CommentUpdateInput {
  message: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  contains: DateTime
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: FloatFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: IntFilter
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Log {
  createdAt: DateTime!
  expiration: DateTime
  id: Int!
  message: String
  type: LogType
  updatedAt: DateTime!
}

input LogAggregate {
  average: [LogFields!]
  count: [LogFields!]
  maximum: [LogFields!]
  minimum: [LogFields!]
  sum: [LogFields!]
}

input LogCreateInput {
  expiration: DateTime
  message: String
  type: LogType
}

enum LogFields {
  createdAt
  expiration
  id
  message
  type
  updatedAt
}

input LogFilter {
  createdAt: DateTimeFilter
  expiration: DateTimeFilter
  id: IntFilter
  message: StringFilter
  type: LogTypeFilter
  updatedAt: DateTimeFilter
}

input LogOrderBy {
  createdAt: OrderBy
  expiration: OrderBy
  id: OrderBy
  message: OrderBy
  type: OrderBy
  updatedAt: OrderBy
}

enum LogType {
  Banner
  Debug
  Error
  Fatal
  Info
  Trace
  Warn
}

input LogTypeFilter {
  equals: LogType
  in: [LogType!]
  not: LogTypeFilter
}

input LogUniqueFilter {
  id: Int
}

input LogUpdateInput {
  expiration: DateTime
  message: String
  type: LogType
}

type Mutation {
  """Create a new comment."""
  createComment(create: CommentCreateInput): Comment!

  """Create a new log."""
  createLog(create: LogCreateInput): Log!

  """Create a new user."""
  createUser(create: UserCreateInput): User!

  """Delete the specified comment."""
  deleteComment(id: Int!): Comment!

  """Delete the currently logged in user."""
  deleteCurrent: User!

  """Delete the specified log."""
  deleteLog(id: Int!): Log!

  """Delete the specified user."""
  deleteUser(id: String!): User!

  """Update the specified comment."""
  updateComment(id: Int!, update: CommentUpdateInput): Comment!

  """Update the currently logged in user."""
  updateCurrent(update: UserUpdateInput): User!

  """Update the specified log."""
  updateLog(id: Int!, update: LogUpdateInput): Log!

  """Update the specified user."""
  updateUser(id: String!, update: UserUpdateInput): User!
}

enum OrderBy {
  Asc
  Desc
}

input PagingInput {
  skip: Int!
  take: Int!
}

type Query {
  """Count the number of comments."""
  countComments(where: CommentFilter): Int!

  """Count the number of logs."""
  countLogs(where: LogFilter): Int!

  """Count the number of user."""
  countUsers(where: UserFilter): Int!

  """Group a list of comments."""
  groupComments(aggregate: CommentAggregate, by: [CommentFields!]!, where: CommentFilter): [JSON!]!

  """Group a list of logs."""
  groupLogs(aggregate: LogAggregate, by: [LogFields!]!, where: LogFilter): [JSON!]!

  """Group a list of user."""
  groupUsers(aggregate: UserAggregate, by: [UserFields!]!, where: UserFilter): [JSON!]!

  """Read a unique comment."""
  readComment(where: CommentUniqueFilter): Comment!

  """Read a list of comments."""
  readComments(distinct: [CommentFields!], orderBy: [CommentOrderBy!], paging: PagingInput, where: CommentFilter): [Comment!]!

  """Read the currently logged in user."""
  readCurrent: User!

  """Read a unique log."""
  readLog(where: LogUniqueFilter): Log!

  """Read a list of logs."""
  readLogs(distinct: [LogFields!], orderBy: [LogOrderBy!], paging: PagingInput, where: LogFilter): [Log!]!

  """Read a unique user."""
  readUser(where: UserUniqueFilter): User!

  """Read a list of user."""
  readUsers(distinct: [UserFields!], orderBy: [UserOrderBy!], paging: PagingInput, where: UserFilter): [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  in: [String!]
  mode: StringFilterMode
  not: StringFilter
  startsWith: String
}

enum StringFilterMode {
  Default
  Insensitive
}

type User {
  comments: [Comment!]
  createdAt: DateTime!
  email: String
  id: ID!
  name: String
  preferences: JSON
  scope: String
  updatedAt: DateTime!
}

input UserAggregate {
  average: [UserFields!]
  count: [UserFields!]
  maximum: [UserFields!]
  minimum: [UserFields!]
  sum: [UserFields!]
}

input UserCreateInput {
  email: String!
  name: String
  password: String
  preferences: String
  scope: String
}

enum UserFields {
  createdAt
  email
  emailVerified
  id
  image
  name
  preferences
  scope
  updatedAt
}

input UserFilter {
  altId: StringFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  scope: StringFilter
  updatedAt: DateTimeFilter
}

input UserOrderBy {
  createdAt: OrderBy
  email: OrderBy
  id: OrderBy
  name: OrderBy
  scope: OrderBy
  updatedAt: OrderBy
}

input UserUniqueFilter {
  id: String
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  preferences: String
  scope: String
}